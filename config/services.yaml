# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $stopwatch: '@?debug.stopwatch'
            $eventProducer: '@qubit.event.producer'
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    #Definicion de Factory para Cache. En caso de necesitar otro motor, crear un nueva serivicio de factory con otra conexion
    App\Service\CacheManagerFactory:
        class: Qubit\Bundle\UtilsBundle\Factory\CacheManagerFactory
        public: true
        arguments:
            - '%env(CACHE_TYPE)%' #'redis'
            - '%env(CACHE_DSN)%'  #'redis://127.0.0.1:6379'

    # Ejemplo de implementacion de Factory para tener una instancia de cache con namespace especifico
    App\Cache\TestCache:
        factory:   'App\Service\CacheManagerFactory:cacheManager'
        arguments: ['app.test']

    # Ejemplo de servicio test
    App\Service\TestService:
        class: App\Service\TestService
        public: true
        arguments:
            - '@doctrine.orm.entity_manager'
            - '@App\Cache\TestCache'          #Paso un manager especifico de Cache
            - '@monolog.logger.test'          #Paso un canal especifico de monolog
                                              #Stopwatch pasa directamente por configuracion default en BIND